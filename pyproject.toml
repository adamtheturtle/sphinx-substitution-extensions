[tool.pylint]

    [tool.pylint.'MASTER']

    # Pickle collected data for later comparisons.
    persistent = true

    # Use multiple processes to speed up Pylint.
    jobs = 0

    # List of plugins (as comma separated values of python modules names) to load,
    # usually to register additional checkers.
    load-plugins = [
        'pylint.extensions.docparams',
        'pylint.extensions.no_self_use',
    ]

    # Allow loading of arbitrary C extensions. Extensions are imported into the
    # active Python interpreter and may run arbitrary code.
    unsafe-load-any-extension = false

    [tool.pylint.'MESSAGES CONTROL']

    # Enable the message, report, category or checker with the given id(s). You can
    # either give multiple identifier separated by comma (,) or put this option
    # multiple time (only on the command line, not in the configuration file where
    # it should appear only once). See also the "--disable" option for examples.
    enable = [
        'spelling',
        'useless-suppression',
    ]

    # Disable the message, report, category or checker with the given id(s). You
    # can either give multiple identifiers separated by comma (,) or put this
    # option multiple times (only on the command line, not in the configuration
    # file where it should appear only once).You can also use "--disable=all" to
    # disable everything first and then reenable specific checks. For example, if
    # you want to run only the similarities checker, you can use "--disable=all
    # --enable=similarities". If you want to run only the classes checker, but have
    # no Warning level messages displayed, use"--disable=all --enable=classes
    # --disable=W"

    disable = [
        'too-few-public-methods',
        'too-many-locals',
        'too-many-arguments',
        'too-many-instance-attributes',
        'too-many-return-statements',
        'too-many-lines',
        'locally-disabled',
        # Let flake8 handle long lines
        'line-too-long',
        # Let ruff handle unused imports
        'unused-import',
        # Let ruff deal with sorting
        'ungrouped-imports',
        # We don't need everything to be documented because of mypy
        'missing-type-doc',
        'missing-return-type-doc',
        # Too difficult to please
        'duplicate-code',
        # Let ruff handle imports
        'wrong-import-order',
        # Let ruff find protected member access.
        'protected-access',
    ]

    [tool.pylint.'FORMAT']

    # Allow the body of an if to be on the same line as the test if there is no
    # else.
    single-line-if-stmt = false

    [tool.pylint.'SPELLING']

    # Spelling dictionary name. Available dictionaries: none. To make it working
    # install python-enchant package.
    spelling-dict = 'en_US'

    # A path to a file that contains private dictionary; one word per line.
    spelling-private-dict-file = 'spelling_private_dict.txt'

    # Tells whether to store unknown words to indicated private dictionary in
    # --spelling-private-dict-file option instead of raising a message.
    spelling-store-unknown-words = 'no'

[tool.black]

line-length = 79

[tool.coverage.run]

branch = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.pytest.ini_options]

xfail_strict = true
log_cli = true

[tool.check-manifest]

ignore = [
    "*.enc",
    "readthedocs.yaml",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.rst",
    "CONTRIBUTING.rst",
    "LICENSE",
    "Makefile",
    "ci",
    "ci/**",
    "codecov.yaml",
    "docs",
    "docs/**",
    ".git_archival.txt",
    "sample",
    "sample/**",
    "spelling_private_dict.txt",
    "tests",
    "tests-pylintrc",
    "tests/**",
    "lint.mk",
]

[tool.doc8]

max_line_length = 2000
ignore_path = [
    "./.eggs",
    "./docs/build",
    "./docs/build/spelling/output.txt",
    "./node_modules",
    "./src/*.egg-info/",
    "./src/*/_setuptools_scm_version.txt",
]

[tool.mypy]

strict = true

[build-system]
requires = [
     "pip",
     "setuptools",
     "setuptools-scm-git-archive==1.4",
     "setuptools_scm[toml]==7.1.0",
     "wheel",
 ]
build-backend = "setuptools.build_meta"

[tool.ruff]
select = ["ALL"]

ignore = [
    # We do not annotate the type of 'self'.
    "ANN101",
    # Allow our chosen docstring line-style - no one-line summary.
    "D200",
    "D203",
    "D205",
    "D212",
    "D213",
    # Allow backslashes in a docstring.
    # See https://click.palletsprojects.com/en/8.0.x/documentation/#preventing-rewrapping.
    "D301",
    # It is too much work to make every docstring imperative.
    "D401",
    # We ignore some docstyle errors which do not apply to Google style
    # docstrings.
    "D406",
    "D407",
    # Ignore "too-many-*" errors as they seem to get in the way more than
    # helping.
    "PLR0913",
    # Allow 'assert' as we use it for tests.
    "S101",
]

# Do not automatically remove commented out code.
# We comment out code during development, and with VSCode auto-save, this code
# is sometimes annoyingly removed.
unfixable = ["ERA001"]

[tool.distutils.bdist_wheel]
universal = true

[project]
authors = [ { name = "Adam Dangoor", email = "adamdangoor@gmail.com"} ]
classifiers = [
    "Operating System :: POSIX",
    "Environment :: Web Environment",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Development Status :: 5 - Production/Stable",
    "Framework :: Pytest",
]
description = "Extensions for Sphinx which allow for substitutions."
dynamic = ["version"]
keywords = ["sphinx", "rst", "documentation"]
license = { file = "LICENSE" }
name = "sphinx-substitution-extensions"
readme = { file = "README.rst", content-type = "text/x-rst"}
requires-python = ">=3.9"
dependencies = [
    # The lowest versions of these are matched in the ``.github/workflows/ci-versions.yml`` workflow.
    "docutils>=0.19",
    "sphinx>=5.1.1",
]

[project.optional-dependencies]
dev = [
    "black==23.7.0",
    "check-manifest==0.49",
    "doc8==1.1.1",
    "mypy==1.4.1",
    "pdm==2.7.4",
    "pip_check_reqs==2.4.4",
    "pyenchant==3.2.2",
    "pylint==2.17.4",
    "pyright==1.1.317",
    "pyroma==4.2",
    "pytest-cov==4.1.0",
    "pytest==7.4.0",
    "ruff==0.0.278",
    "types-docutils==0.20.0.1",
    "vulture==2.7",
]
prompt = ["sphinx-prompt>=0.1"]

[project.urls]
Source = "https://github.com/adamtheturtle/sphinx-substitution-extensions"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
sphinx_substitution_extensions = ["py.typed"]

[tool.setuptools_scm]

[tool.pyright]
